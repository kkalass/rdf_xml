// File handling with RDF/XML
//
// This example demonstrates how to read RDF/XML data from a file
// and write processed data back to a file.

import 'dart:io';
import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_xml/rdf_xml.dart';

Future<void> main() async {
  // Create a simple RDF/XML file for demonstration purposes
  await createSampleFile();

  // Read and parse the RDF/XML file
  await parseFromFile();

  // Create and write an RDF graph to a file
  await writeToFile();

  // Clean up example files
  await cleanupFiles();
}

/// Creates a sample RDF/XML file for demonstration
Future<void> createSampleFile() async {
  final sampleContent = '''
    <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
             xmlns:dc="http://purl.org/dc/elements/1.1/"
             xmlns:ex="http://example.org/vocab#"
             xml:base="http://example.org/data/">
      <ex:Book rdf:about="book1">
        <dc:title>File Handling Example</dc:title>
        <dc:creator>Example Author</dc:creator>
        <ex:published rdf:datatype="http://www.w3.org/2001/XMLSchema#date">2025-05-05</ex:published>
        <ex:pages rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">256</ex:pages>
      </ex:Book>
    </rdf:RDF>
  ''';

  print('Creating sample RDF/XML file...');
  final file = File('example_data.rdf');
  await file.writeAsString(sampleContent);
  print('Sample file created: ${file.absolute.path}\n');
}

/// Reads and parses an RDF/XML file
Future<void> parseFromFile() async {
  print('--- READING RDF/XML FROM FILE ---');

  final file = File('example_data.rdf');
  final xmlContent = await file.readAsString();

  // Decode with base URI set to the file location
  final rdfGraph = rdfxml.decode(
    xmlContent,
    documentUrl: 'file://${file.absolute.path}',
  );

  print('Parsed ${rdfGraph.size} triples from file:');
  for (final triple in rdfGraph.triples) {
    print('- $triple');
  }

  print('');
}

/// Creates and writes an RDF graph to a file
Future<void> writeToFile() async {
  print('--- WRITING RDF/XML TO FILE ---');

  // Create a graph with some triples
  final graph = RdfGraph.fromTriples([
    Triple(
      IriTerm('http://example.org/resource/article1'),
      IriTerm('http://purl.org/dc/elements/1.1/title'),
      LiteralTerm.string('Generated RDF/XML Example'),
    ),
    Triple(
      IriTerm('http://example.org/resource/article1'),
      IriTerm('http://purl.org/dc/elements/1.1/creator'),
      LiteralTerm.string('Generated by Example'),
    ),
    Triple(
      IriTerm('http://example.org/resource/article1'),
      IriTerm('http://example.org/vocab#category'),
      LiteralTerm.string('Example'),
    ),
  ]);

  // Create a serializer with readable formatting
  final codec = RdfXmlCodec.readable();

  // Encode with custom prefixes
  final rdfXml = codec.encode(
    graph,
    customPrefixes: {
      'dc': 'http://purl.org/dc/elements/1.1/',
      'ex': 'http://example.org/vocab#',
    },
  );

  // Write to file
  final outputFile = File('output_data.rdf');
  await outputFile.writeAsString(rdfXml);

  print('RDF/XML written to file: ${outputFile.absolute.path}');
  print('File content:');
  print(rdfXml);

  print('');
}

/// Cleans up example files
Future<void> cleanupFiles() async {
  print('--- CLEANING UP ---');

  // Delete the files we created
  final inputFile = File('example_data.rdf');
  final outputFile = File('output_data.rdf');

  if (await inputFile.exists()) {
    await inputFile.delete();
    print('Deleted: ${inputFile.path}');
  }

  if (await outputFile.exists()) {
    await outputFile.delete();
    print('Deleted: ${outputFile.path}');
  }

  print('Cleanup complete');
}
